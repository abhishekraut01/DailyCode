generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ USER MODEL
model User {
  id           String     @id @default(uuid())
  name         String
  phoneNumber  String     @unique
  email        String?    @unique
  addresses    Address[]
  orders       Order[]
  cartItems    CartItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

//
// üè† ADDRESS MODEL
//
model Address {
  id          String     @id @default(uuid())
  houseNumber String
  floor       String?
  area        String
  landmark    String?
  pincode     String?
  cityName    String?
  latitude    Float?
  longitude   Float?
  type        AddressType
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([latitude, longitude])
}

enum AddressType {
  home
  work
  hotel
  other
}

//
// üõí PRODUCT MODEL
//
model Product {
  id             String          @id @default(uuid())
  title          String
  description    String
  price          Float
  category       ProductCategory
  media          Media[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  stockQuantity  Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum ProductCategory {
  Dairy
  Bread
  Eggs
  Snacks
  Munchies
  Vegetables
  Fruits
  Beverages
  PersonalCare
  Household
}

//
// üì∏ MEDIA MODEL
//
model Media {
  id         String   @id @default(uuid())
  url        String
  mediaType  MediaType
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum MediaType {
  image
  video
}

//
// üõçÔ∏è CART MODEL (For items before placing order)
//
model CartItem {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  quantity   Int      @default(1)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
}

//
// üì¶ ORDER MODEL
//
model Order {
  id            String        @id @default(uuid())
  userId        String
  addressId     String
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  orderStatus   OrderStatus   @default(PLACED)

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       Address       @relation(fields: [addressId], references: [id])
  items         OrderItem[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PLACED
  PROCESSING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

//
// üì¶ ORDER ITEM MODEL (Each product inside an order)
//
model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Float

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
