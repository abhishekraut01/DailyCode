generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// Users Table
// ============================
model User {
  id                String         @id @default(uuid())
  username          String         @unique
  email             String         @unique
  password          String
  isVerified        Boolean        @default(false)
  profile           Profile?       @relation("UserProfile")
  tweets            Tweet[]
  notifications     Notification[]
  messagesSent      Message[]      @relation("SentMessages")
  messagesReceived  Message[]      @relation("ReceivedMessages")
  likes             Like[]
  retweetsMade      Retweet[]      @relation("UserRetweets")
  retweetsOwned     Retweet[]      @relation("OriginalTweetOwner")
  followers         Follow[]       @relation("UserFollowers")
  following         Follow[]       @relation("UserFollowing")
  comments          Comment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// ============================
// Profile Table (One-to-One with User)
// ============================
model Profile {
  id              String          @id @default(uuid())
  bio             String?
  profileCategory ProfileCategory
  userId          String          @unique
  user            User            @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

}

enum ProfileCategory {
  Education
  Financial
  Professional
  Advertising
  Science
  Sport
  Travel
  Influencer
  Entrepreneur
  Community
  Other
}

// ============================
// Follow Table (Many-to-Many: User ↔ User)
// ============================
model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

// ============================
// Notification Table (One-to-Many with User)
// ============================
model Notification {
  id        String             @id @default(uuid())
  userId    String
  content   String
  type      NotificationType
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

}

enum NotificationType {
  USER
  SYSTEM
}

// ============================
// Messages Table (One-to-Many for Sender/Receiver)
// ============================
model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  isSeen     Boolean  @default(false)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

}

// ============================
// Tweet Table (One-to-Many with User)
// ============================
model Tweet {
  id        String     @id @default(uuid())
  content   String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  media     Media[]
  retweets  Retweet[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// ============================
// Media Table (One-to-Many with Tweet)
// ============================
model Media {
  id        String     @id @default(uuid())
  tweetId   String
  url       String
  type      MediaType
  tweet     Tweet      @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

enum MediaType {
  IMAGE
  VIDEO
  GIF
}

// ============================
// Comment Table (One-to-Many with Tweet & User)
// ============================
model Comment {
  id        String     @id @default(uuid())
  tweetId   String
  userId    String
  tweet     Tweet      @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

// ============================
// Like Table (Polymorphic: Tweet or Comment)
// ============================
model Like {
  id        String     @id @default(uuid())
  tweetId   String?
  commentId String?
  likeType  LikeType
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet     Tweet?     @relation(fields: [tweetId], references: [id])
  comment   Comment?   @relation(fields: [commentId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

enum LikeType {
  TWEET
  COMMENT
}

// ============================
// Retweet Table (Many-to-Many: User ↔ Tweet)
// ============================
model Retweet {
  id              String   @id @default(uuid())
  tweetId         String
  retweetUserId   String
  originalOwnerId String
  tweet           Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  retweetUser     User     @relation("UserRetweets", fields: [retweetUserId], references: [id], onDelete: Cascade)
  originalOwner   User     @relation("OriginalTweetOwner", fields: [originalOwnerId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

}