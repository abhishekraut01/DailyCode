generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── USER MODEL ───────────────────────────────────────────────────────────────
//

model User {
  id               String          @id @default(uuid())
  username         String          @unique
  password         String
  profile          Profile?
  tweets           Tweet[]
  comments         Comment[]
  likes            Like[]
  retweets         Retweet[]
  notifications    Notification[]
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  isVerified       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

//
// ─── PROFILE MODEL ─────────────────────────────────────────────────────────────
//

model Profile {
  id              String          @id @default(uuid())
  bio             String?
  profileCategory ProfileCategory
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProfileCategory {
  Education
  Financial
  Professional
  Advertising
  Science
  Sport
  Travel
  Influencer
  Entrepreneur
  Community
  Other
}

//
// ─── NOTIFICATIONS MODEL ───────────────────────────────────────────────────────
//

model Notification {
  id        String            @id @default(uuid())
  userId    String
  content   String
  type      NotificationType
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

enum NotificationType {
  USER
  SYSTEM
}

//
// ─── MESSAGES MODEL ────────────────────────────────────────────────────────────
//

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content    String
  isSeen     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//
// ─── TWEETS MODEL ──────────────────────────────────────────────────────────────
//

model Tweet {
  id          String       @id @default(uuid())
  content     String
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  retweets    Retweet[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([createdAt])
}

//
// ─── COMMENTS MODEL ────────────────────────────────────────────────────────────
//

model Comment {
  id          String    @id @default(uuid())
  content     String
  tweetId     String
  userId      String
  tweet       Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([tweetId])
  @@index([userId])
}

//
// ─── LIKES MODEL ───────────────────────────────────────────────────────────────
//

model Like {
  id          String     @id @default(uuid())
  userId      String
  tweetId     String?
  commentId   String?
  likeType    LikeType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet       Tweet?     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  comment     Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([tweetId])
  @@index([commentId])
}

enum LikeType {
  TWEET
  COMMENT
}

//
// ─── RETWEETS MODEL ────────────────────────────────────────────────────────────
//

model Retweet {
  id             String   @id @default(uuid())
  tweetId        String
  retweetUserId  String
  tweet          Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [retweetUserId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([tweetId])
  @@index([retweetUserId])
}
