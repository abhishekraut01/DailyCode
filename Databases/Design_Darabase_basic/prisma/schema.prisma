generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String          @id @default(uuid())
  username         String          @unique
  password         String
  profile          Profile?
  sentMessages     Messages[]      @relation("SentMessages")
  receivedMessages Messages[]      @relation("ReceivedMessages")
  notifications    Notifications[]
  comments         Comments[]
  tweet            Tweet[]
  like             Like[]
  isVarified       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
}

model Profile {
  id              String          @id @default(uuid())
  bio             String?
  profileCategory ProfileCategory
  userId          String          @unique
  user            Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProfileCategory {
  Education
  Financial
  Professional
  Advertising
  Science
  Sport
  Travel
  Influencer
  Entrepreneur
  Community
  Other
}

model Notifications {
  id        String            @id @default(uuid())
  userId    String
  content   String
  type      NotificationsType
  user      Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
}

enum NotificationsType {
  user
  system
}

model Messages {
  id         String   @id @default(uuid())
  senderId   String
  recieverId String
  sender     Users    @relation("SentMessages", fields: [senderId], references: [id])
  reciever   Users    @relation("ReceivedMessages", fields: [recieverId], references: [id])
  content    String
  isSeen     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Tweet {
  id        String     @id @default(uuid())
  content   String
  userId    String
  isSeen    Boolean    @default(false)
  comments  Comments[]
  likes     Like[] // one-to-many: user -> likes
  user      Users      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Comments {
  id        String   @id @default(uuid())
  tweetId   String
  userId    String
  like      Like[]
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Like {
  id        String    @id @default(uuid())
  tweetId   String?
  commentId String?
  likeType  LikeType
  userId    String
  user      Users     @relation(fields: [userId], references: [id])
  tweet     Tweet?    @relation(fields: [tweetId], references: [id])
  comment   Comments? @relation(fields: [commentId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

enum LikeType {
  tweetId
  commentId
}

model Retweet {
  id             String   @id @default(uuid())
  tweetId        String
  orignalOwnerId String
  retweetUserId  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}
